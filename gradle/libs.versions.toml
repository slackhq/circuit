[versions]
androidx-activity = "1.11.0"
androidx-annotation = "1.9.1"
androidx-appcompat = "1.7.1"
androidx-browser = "1.9.0"
androidx-compose = "1.9.4"
agp = "8.13.0"
anvil = "0.4.1"
atomicfu = "0.29.0"
benchmark = "1.4.1"
coil = "3.3.0"
compose-hotReload = "1.0.0-rc02"
compose-jb = "1.9.2"
compose-jb-material3 = "1.9.0"
compose-jb-material-icons-core = "1.7.3"
dagger = "2.57.2"
datastore = "1.1.7"
detekt = "1.23.8"
dokka = "2.1.0"
eithernet = "2.0.0"
jdk = "23"
jvmTarget = "11"
publishedJvmTarget = "11"
kct = "0.9.0"
kotlin = "2.2.21"
kotlinInject = "0.8.0"
kotlinInject-anvil = "0.1.6"
kotlinpoet = "2.2.0"
kotlinx-coroutines = "1.10.2"
kotlinx-serialization = "1.9.0"
ksp = "2.2.20-2.0.4"
ktfmt = "0.58"
ktor = "3.3.1"
leakcanary = "2.14"
lifecycle-jb = "2.9.5"
mavenPublish = "0.34.0"
molecule = "2.2.0"
okhttp = "5.2.1"
okio = "3.16.2"
picnic = "0.7.0"
robolectric = "4.16"
roborazzi = "1.50.0"
spotless = "8.0.0"
sqldelight = "2.1.0"
telephoto = "0.18.0"
testParameterInjector = "1.19"
turbine = "1.2.1"

[plugins]
agp-application = { id = "com.android.application", version.ref = "agp" }
agp-library = { id = "com.android.library", version.ref = "agp" }
agp-test = { id = "com.android.test", version.ref = "agp" }
anvil = { id = "dev.zacsweers.anvil", version.ref = "anvil" }
baselineprofile = { id = "androidx.baselineprofile", version.ref = "benchmark" }
binaryCompatibilityValidator = { id = "org.jetbrains.kotlinx.binary-compatibility-validator", version = "0.18.1" }
compose = { id = "org.jetbrains.compose", version.ref = "compose-jb" }
compose-hotReload = { id = "org.jetbrains.compose.hot-reload", version.ref = "compose-hotReload" }
dependencyGuard = { id = "com.dropbox.dependency-guard", version = "0.5.0" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }
emulatorWtf = { id = "wtf.emulator.gradle", version = "0.19.4" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-atomicfu = { id = "org.jetbrains.kotlin.plugin.atomicfu", version.ref = "kotlin" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlin-plugin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
kotlin-plugin-parcelize = { id = "org.jetbrains.kotlin.plugin.parcelize", version.ref = "kotlin" }
kotlin-plugin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
mavenPublish = { id = "com.vanniktech.maven.publish", version.ref = "mavenPublish" }
metro = { id = "dev.zacsweers.metro", version = "0.6.10" }
nativecoroutines = { id = "com.rickclephas.kmp.nativecoroutines", version = "1.0.0-ALPHA-47" }
roborazzi = { id = "io.github.takahirom.roborazzi", version.ref = "roborazzi" }
spotless = { id = "com.diffplug.spotless", version.ref = "spotless" }
sqldelight = { id = "app.cash.sqldelight", version.ref = "sqldelight" }

[libraries]
agp = { module = "com.android.tools.build:gradle", version.ref = "agp" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activity" }
androidx-activity-ktx = { module = "androidx.activity:activity-ktx", version.ref = "androidx-activity" }
androidx-annotation = { module = "androidx.annotation:annotation", version.ref = "androidx-annotation" }
androidx-appCompat = { module = "androidx.appcompat:appcompat", version.ref = "androidx-appcompat" }
androidx-benchmark-macro-junit = { module = "androidx.benchmark:benchmark-macro-junit4", version.ref = "benchmark" }
androidx-browser = { module = "androidx.browser:browser", version.ref = "androidx-browser" }
androidx-compose-googleFonts = { module = "androidx.compose.ui:ui-text-google-fonts", version.ref = "androidx-compose" }
androidx-compose-runtime-rxjava3 = { module = "androidx.compose.runtime:runtime-rxjava3", version.ref = "androidx-compose" }
# Compose testing library that should be added as a debugImplementation dependency to add properties to the debug manifest necessary for testing an application
androidx-compose-ui-testing-manifest = { module = "androidx.compose.ui:ui-test-manifest", version.ref = "androidx-compose" }
androidx-datastore-preferences = { module = "androidx.datastore:datastore-preferences", version.ref = "datastore" }

# Force a newer version of androidx.loader because Espresso depends on an old and wrong version of it
androidx-loader = "androidx.loader:loader:1.1.0"
androidx-profileinstaller = "androidx.profileinstaller:profileinstaller:1.4.1"
androidx-test-espresso-core = "androidx.test.espresso:espresso-core:3.7.0"
androidx-test-ext-junit = "androidx.test.ext:junit:1.3.0"
androidx-test-monitor = "androidx.test:monitor:1.8.0"
androidx-test-uiautomator = "androidx.test.uiautomator:uiautomator:2.3.0"

anvil-annotations = { module = "dev.zacsweers.anvil:annotations", version.ref = "anvil" }
anvil-annotations-optional = { module = "dev.zacsweers.anvil:annotations-optional", version.ref = "anvil" }

# Utilities for local storage dirs on Desktop
# https://github.com/harawata/appdirs
appDirs = "net.harawata:appdirs:1.5.0"

atomicfu = { module = "org.jetbrains.kotlinx:atomicfu", version.ref = "atomicfu" }

autoService-annotations = { module = "com.google.auto.service:auto-service-annotations", version = "1.1.1" }
autoService-ksp = { module = "dev.zacsweers.autoservice:auto-service-ksp", version = "1.2.0" }

coil = { module = "io.coil-kt.coil3:coil", version.ref = "coil" }
coil-compose = { module = "io.coil-kt.coil3:coil-compose-core", version.ref = "coil" }
coil-network-ktor = { module = "io.coil-kt.coil3:coil-network-ktor3", version.ref = "coil" }
coil-network-okhttp = { module = "io.coil-kt.coil3:coil-network-okhttp", version.ref = "coil" }
coil-test = { module = "io.coil-kt.coil3:coil-test", version.ref = "coil" }

# Compose Mutliplatform
compose-foundation = { module = "org.jetbrains.compose.foundation:foundation", version.ref = "compose-jb" }
compose-material-icons = { module = "org.jetbrains.compose.material:material-icons-core", version.ref = "compose-jb-material-icons-core" }
compose-material-material = { module = "org.jetbrains.compose.material:material", version.ref = "compose-jb" }
compose-material-material3 = { module = "org.jetbrains.compose.material3:material3", version.ref = "compose-jb-material3" }
compose-runtime = { module = "org.jetbrains.compose.runtime:runtime", version.ref = "compose-jb" }
compose-runtime-saveable = { module = "org.jetbrains.compose.runtime:runtime-saveable", version.ref = "compose-jb" }
compose-ui = { module = "org.jetbrains.compose.ui:ui", version.ref = "compose-jb" }
compose-ui-backhandler = { module = "org.jetbrains.compose.ui:ui-backhandler", version.ref = "compose-jb" }
compose-ui-test = { module = "org.jetbrains.compose.ui:ui-test", version.ref = "compose-jb" }
compose-ui-testing-junit = { module = "org.jetbrains.compose.ui:ui-test-junit4", version.ref = "compose-jb" }
compose-ui-tooling = { module = "org.jetbrains.compose.ui:ui-tooling", version.ref = "compose-jb" }
compose-ui-tooling-data = { module = "org.jetbrains.compose.ui:ui-tooling-data", version.ref = "compose-jb" }
compose-ui-tooling-preview = { module = "org.jetbrains.compose.ui:ui-tooling-preview", version.ref = "compose-jb" }
compose-ui-util = { module = "org.jetbrains.compose.ui:ui-util", version.ref = "compose-jb" }

coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinx-coroutines" }
coroutines-rxjava = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-rx3", version.ref = "kotlinx-coroutines" }
coroutines-swing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "kotlinx-coroutines" }
coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }

dagger = { module = "com.google.dagger:dagger", version.ref = "dagger" }

desugarJdkLibs = "com.android.tools:desugar_jdk_libs:2.1.5"

# Referenced in the root build.gradle
detektPlugins-twitterCompose = "com.twitter.compose.rules:detekt:0.0.26"

eithernet = { module = "com.slack.eithernet:eithernet", version.ref = "eithernet" }
eithernet-testFixtures = { module = "com.slack.eithernet:eithernet-test-fixtures", version.ref = "eithernet" }
hilt = { module = "com.google.dagger:hilt-core", version.ref = "dagger" }
jsoup = "org.jsoup:jsoup:1.21.2"
junit = "junit:junit:4.13.2"
kct = { module = "dev.zacsweers.kctfork:core", version.ref = "kct" }
kct-ksp = { module = "dev.zacsweers.kctfork:ksp", version.ref = "kct" }

kotlin-bom = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlin" }
kotlin-compilerEmbeddable = { module = "org.jetbrains.kotlin:kotlin-compiler-embeddable", version.ref = "kotlin" }
kotlin-plugins-bom = { module = "org.jetbrains.kotlin:kotlin-gradle-plugins-bom", version.ref = "kotlin" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }

kotlinInject-anvil-compiler = { module = "software.amazon.lastmile.kotlin.inject.anvil:compiler", version.ref = "kotlinInject-anvil" }
kotlinInject-anvil-runtime = { module = "software.amazon.lastmile.kotlin.inject.anvil:runtime", version.ref = "kotlinInject-anvil" }
kotlinInject-anvil-runtime-optional = { module = "software.amazon.lastmile.kotlin.inject.anvil:runtime-optional", version.ref = "kotlinInject-anvil" }
kotlinInject-compiler = { module = "me.tatarka.inject:kotlin-inject-compiler-ksp", version.ref = "kotlinInject" }
kotlinInject-runtime = { module = "me.tatarka.inject:kotlin-inject-runtime", version.ref = "kotlinInject" }
kotlinpoet = { module = "com.squareup:kotlinpoet", version.ref = "kotlinpoet" }
kotlinpoet-ksp = { module = "com.squareup:kotlinpoet-ksp", version.ref = "kotlinpoet" }

ksoup = "com.fleeksoft.ksoup:ksoup-ktor2:0.2.0"

ksp = { module = "com.google.devtools.ksp:symbol-processing", version.ref = "ksp" }
ksp-api = { module = "com.google.devtools.ksp:symbol-processing-api", version.ref = "ksp" }
# Only present to trigger automatic renovate updates
ktfmt = { module = "com.facebook:ktfmt", version.ref = "ktfmt" }

ktor-client = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-client-contentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-engine-js = { module = "io.ktor:ktor-client-js", version.ref = "ktor" }
ktor-client-engine-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-serialization-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }

leakcanary-android = { module = "com.squareup.leakcanary:leakcanary-android", version.ref = "leakcanary" }
leakcanary-android-instrumentation = { module = "com.squareup.leakcanary:leakcanary-android-instrumentation", version.ref = "leakcanary" }

# Lifecycle Mutliplatform
lifecycle-runtime-compose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose", version.ref = "lifecycle-jb" }
lifecycle-viewModel-compose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycle-jb" }

lints-compose = "com.slack.lint.compose:compose-lint-checks:1.4.2"

molecule-runtime = { module = "app.cash.molecule:molecule-runtime", version.ref = "molecule" }

mosaic = "com.jakewharton.mosaic:mosaic-runtime:0.18.0"

okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttp-loggingInterceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okhttp" }
okio = { module = "com.squareup.okio:okio", version.ref = "okio" }
okio-fakefilesystem = { module = "com.squareup.okio:okio-fakefilesystem", version.ref = "okio" }
picnic = { module = "com.jakewharton.picnic:picnic", version.ref = "picnic" }
robolectric = { module = "org.robolectric:robolectric", version.ref = "robolectric" }

roborazzi = { module = "io.github.takahirom.roborazzi:roborazzi", version.ref = "roborazzi" }
roborazzi-compose = { module = "io.github.takahirom.roborazzi:roborazzi-compose", version.ref = "roborazzi" }
roborazzi-rules = { module = "io.github.takahirom.roborazzi:roborazzi-junit-rule", version.ref = "roborazzi" }

rxjava = "io.reactivex.rxjava3:rxjava:3.1.12"

slf4jNop = "org.slf4j:slf4j-nop:2.0.17"

sqldelight-coroutines = { module = "app.cash.sqldelight:coroutines-extensions-jvm", version.ref = "sqldelight" }
sqldelight-driver-android = { module = "app.cash.sqldelight:android-driver", version.ref = "sqldelight" }
sqldelight-driver-jdbc = { module = "app.cash.sqldelight:sqlite-driver", version.ref = "sqldelight" }
sqldelight-primitiveAdapters = { module = "app.cash.sqldelight:primitive-adapters", version.ref = "sqldelight" }

telephoto-zoomableImageCoil = { module = "me.saket.telephoto:zoomable-image-coil", version.ref = "telephoto" }

testing-assertk = "com.willowtreeapps.assertk:assertk:0.28.1"
testing-testParameterInjector = { module = "com.google.testparameterinjector:test-parameter-injector", version.ref = "testParameterInjector" }
truth = "com.google.truth:truth:1.4.5"
turbine = { module = "app.cash.turbine:turbine", version.ref = "turbine" }

windowSizeClass = "dev.chrisbanes.material3:material3-window-size-class-multiplatform:0.5.0"
