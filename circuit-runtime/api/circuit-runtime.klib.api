// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <circuit-root:circuit-runtime>
open annotation class com.slack.circuit.runtime/ExperimentalCircuitApi : kotlin/Annotation { // com.slack.circuit.runtime/ExperimentalCircuitApi|null[0]
    constructor <init>() // com.slack.circuit.runtime/ExperimentalCircuitApi.<init>|<init>(){}[0]
}

open annotation class com.slack.circuit.runtime/InternalCircuitApi : kotlin/Annotation { // com.slack.circuit.runtime/InternalCircuitApi|null[0]
    constructor <init>() // com.slack.circuit.runtime/InternalCircuitApi.<init>|<init>(){}[0]
}

abstract interface com.slack.circuit.runtime/CircuitUiEvent // com.slack.circuit.runtime/CircuitUiEvent|null[0]

abstract interface com.slack.circuit.runtime/CircuitUiState // com.slack.circuit.runtime/CircuitUiState|null[0]

abstract interface com.slack.circuit.runtime/GoToNavigator { // com.slack.circuit.runtime/GoToNavigator|null[0]
    abstract fun goTo(com.slack.circuit.runtime.screen/Screen): kotlin/Boolean // com.slack.circuit.runtime/GoToNavigator.goTo|goTo(com.slack.circuit.runtime.screen.Screen){}[0]
}

abstract interface com.slack.circuit.runtime/Navigator : com.slack.circuit.runtime/GoToNavigator { // com.slack.circuit.runtime/Navigator|null[0]
    abstract fun goTo(com.slack.circuit.runtime.screen/Screen): kotlin/Boolean // com.slack.circuit.runtime/Navigator.goTo|goTo(com.slack.circuit.runtime.screen.Screen){}[0]
    abstract fun peek(): com.slack.circuit.runtime.screen/Screen? // com.slack.circuit.runtime/Navigator.peek|peek(){}[0]
    abstract fun peekBackStack(): kotlinx.collections.immutable/ImmutableList<com.slack.circuit.runtime.screen/Screen> // com.slack.circuit.runtime/Navigator.peekBackStack|peekBackStack(){}[0]
    abstract fun pop(com.slack.circuit.runtime.screen/PopResult? = ...): com.slack.circuit.runtime.screen/Screen? // com.slack.circuit.runtime/Navigator.pop|pop(com.slack.circuit.runtime.screen.PopResult?){}[0]
    abstract fun resetRoot(com.slack.circuit.runtime.screen/Screen, kotlin/Boolean = ..., kotlin/Boolean = ...): kotlinx.collections.immutable/ImmutableList<com.slack.circuit.runtime.screen/Screen> // com.slack.circuit.runtime/Navigator.resetRoot|resetRoot(com.slack.circuit.runtime.screen.Screen;kotlin.Boolean;kotlin.Boolean){}[0]

    final object NoOp : com.slack.circuit.runtime/Navigator { // com.slack.circuit.runtime/Navigator.NoOp|null[0]
        final fun goTo(com.slack.circuit.runtime.screen/Screen): kotlin/Boolean // com.slack.circuit.runtime/Navigator.NoOp.goTo|goTo(com.slack.circuit.runtime.screen.Screen){}[0]
        final fun peek(): com.slack.circuit.runtime.screen/Screen? // com.slack.circuit.runtime/Navigator.NoOp.peek|peek(){}[0]
        final fun peekBackStack(): kotlinx.collections.immutable/ImmutableList<com.slack.circuit.runtime.screen/Screen> // com.slack.circuit.runtime/Navigator.NoOp.peekBackStack|peekBackStack(){}[0]
        final fun pop(com.slack.circuit.runtime.screen/PopResult?): com.slack.circuit.runtime.screen/Screen? // com.slack.circuit.runtime/Navigator.NoOp.pop|pop(com.slack.circuit.runtime.screen.PopResult?){}[0]
        final fun resetRoot(com.slack.circuit.runtime.screen/Screen, kotlin/Boolean, kotlin/Boolean): kotlinx.collections.immutable/ImmutableList<com.slack.circuit.runtime.screen/Screen> // com.slack.circuit.runtime/Navigator.NoOp.resetRoot|resetRoot(com.slack.circuit.runtime.screen.Screen;kotlin.Boolean;kotlin.Boolean){}[0]
    }
}

final class com.slack.circuit.runtime/CircuitContext { // com.slack.circuit.runtime/CircuitContext|null[0]
    final val parent // com.slack.circuit.runtime/CircuitContext.parent|{}parent[0]
        final fun <get-parent>(): com.slack.circuit.runtime/CircuitContext? // com.slack.circuit.runtime/CircuitContext.parent.<get-parent>|<get-parent>(){}[0]

    final fun <#A1: kotlin/Any, #B1: #A1> putTag(kotlin.reflect/KClass<#A1>, #B1?) // com.slack.circuit.runtime/CircuitContext.putTag|putTag(kotlin.reflect.KClass<0:0>;0:1?){0§<kotlin.Any>;1§<0:0>}[0]
    final fun <#A1: kotlin/Any> tag(kotlin.reflect/KClass<#A1>): #A1? // com.slack.circuit.runtime/CircuitContext.tag|tag(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
    final fun clearTags() // com.slack.circuit.runtime/CircuitContext.clearTags|clearTags(){}[0]
    final inline fun <#A1: reified kotlin/Any> putTag(#A1?) // com.slack.circuit.runtime/CircuitContext.putTag|putTag(0:0?){0§<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> tag(): #A1? // com.slack.circuit.runtime/CircuitContext.tag|tag(){0§<kotlin.Any>}[0]

    final object Companion { // com.slack.circuit.runtime/CircuitContext.Companion|null[0]
        final val EMPTY // com.slack.circuit.runtime/CircuitContext.Companion.EMPTY|{}EMPTY[0]
            final fun <get-EMPTY>(): com.slack.circuit.runtime/CircuitContext // com.slack.circuit.runtime/CircuitContext.Companion.EMPTY.<get-EMPTY>|<get-EMPTY>(){}[0]
    }
}

final val com.slack.circuit.runtime/com_slack_circuit_runtime_CircuitContext$stableprop // com.slack.circuit.runtime/com_slack_circuit_runtime_CircuitContext$stableprop|#static{}com_slack_circuit_runtime_CircuitContext$stableprop[0]
final val com.slack.circuit.runtime/com_slack_circuit_runtime_Navigator_NoOp$stableprop // com.slack.circuit.runtime/com_slack_circuit_runtime_Navigator_NoOp$stableprop|#static{}com_slack_circuit_runtime_Navigator_NoOp$stableprop[0]

final fun (com.slack.circuit.runtime/Navigator).com.slack.circuit.runtime/popRoot(com.slack.circuit.runtime.screen/PopResult? = ...) // com.slack.circuit.runtime/popRoot|popRoot@com.slack.circuit.runtime.Navigator(com.slack.circuit.runtime.screen.PopResult?){}[0]
final fun (com.slack.circuit.runtime/Navigator).com.slack.circuit.runtime/popUntil(kotlin/Function1<com.slack.circuit.runtime.screen/Screen, kotlin/Boolean>) // com.slack.circuit.runtime/popUntil|popUntil@com.slack.circuit.runtime.Navigator(kotlin.Function1<com.slack.circuit.runtime.screen.Screen,kotlin.Boolean>){}[0]
final fun com.slack.circuit.runtime/com_slack_circuit_runtime_CircuitContext$stableprop_getter(): kotlin/Int // com.slack.circuit.runtime/com_slack_circuit_runtime_CircuitContext$stableprop_getter|com_slack_circuit_runtime_CircuitContext$stableprop_getter(){}[0]
final fun com.slack.circuit.runtime/com_slack_circuit_runtime_Navigator_NoOp$stableprop_getter(): kotlin/Int // com.slack.circuit.runtime/com_slack_circuit_runtime_Navigator_NoOp$stableprop_getter|com_slack_circuit_runtime_Navigator_NoOp$stableprop_getter(){}[0]
final inline fun (com.slack.circuit.runtime/Navigator).com.slack.circuit.runtime/resetRoot(com.slack.circuit.runtime.screen/Screen, kotlin/Function1<com.slack.circuit.runtime.screen/Screen?, kotlin/Boolean> = ..., kotlin/Function1<com.slack.circuit.runtime.screen/Screen?, kotlin/Boolean> = ...): kotlin.collections/List<com.slack.circuit.runtime.screen/Screen> // com.slack.circuit.runtime/resetRoot|resetRoot@com.slack.circuit.runtime.Navigator(com.slack.circuit.runtime.screen.Screen;kotlin.Function1<com.slack.circuit.runtime.screen.Screen?,kotlin.Boolean>;kotlin.Function1<com.slack.circuit.runtime.screen.Screen?,kotlin.Boolean>){}[0]
